// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  phone     String?
  address   String?
  refreshToken String?
  role      Role       @default(CUSTOMER)
  stores    Store[]
  carts     Cart[]
  orders    Order[]
  reviews   Review[]
  emailLogs EmailLog[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  verifiedAt DateTime?

  @@map("users")
}

model Store {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  name        String
  description String?
  logo        String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("stores")
}

model Product {
  id          String    @id @default(uuid())
  store       Store      @relation(fields: [shopId], references: [id])
  shopId      String
  name        String
  description String?
  basePrice   Decimal   @db.Decimal(15, 2)
  hasVariants Boolean   @default(false)
  image       String?
  stock       Int       @default(0)
  variants    ProductVariant[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("products")
}

model ProductVariant {
  id             String    @id @default(uuid())
  product        Product   @relation(fields: [productId], references: [id])
  productId      String
  variantName    String
  variantValue   String
  priceAdjustment Decimal  @default(0.00) @db.Decimal(15, 2)
  stock          Int       @default(0)
  cartItems      CartItem[]    // Relasi balik ke CartItem
  orderItems     OrderItem[] 
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("product_variants")
}

model Cart {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("carts")
}

model CartItem {
  id        String        @id @default(uuid())
  cart      Cart          @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product       @relation(fields: [productId], references: [id])
  productId String
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId String?
  quantity  Int           @default(1)
  price     Decimal       @db.Decimal(15, 2)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("cart_items")
}

model Order {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  totalAmount Decimal    @db.Decimal(15, 2)
  status      OrderStatus @default(PENDING)
  items       OrderItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("orders")
}

model OrderItem {
  id          String        @id @default(uuid())
  order       Order         @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product       @relation(fields: [productId], references: [id])
  productId   String
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  variantId   String?
  quantity    Int           @default(1)
  price       Decimal       @db.Decimal(15, 2)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("order_items")
}

model Review {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int      @default(1)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model EmailLog{
  id        String      @id @default(uuid())
  userId    String
  email     String
  type      String   // Jenis email, misalnya 'verification'
  status    String   // Status pengiriman, misalnya 'pending', 'sent', 'failed'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])

  @@map("email_log")
}

enum Role {
  STORE_OWNER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

